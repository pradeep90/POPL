				Notes

* Interface is represented by a tree
** just like the tree in the lec-6 slides
** [WRONG] just that here "method name" is used in place of "->"
** [WRONG] Note, therefore, you have to test for equality of the method name whereas earlier you just had arrows in both cases
* Design
  CLOCK: [2013-02-23 Sat 23:49]--[2013-02-24 Sun 00:05] =>  0:16
  CLOCK: [2013-02-23 Sat 23:06]--[2013-02-23 Sat 23:49] =>  0:43
  CLOCK: [2013-02-22 Fri 13:19]--[2013-02-22 Fri 13:57] =>  0:38
  CLOCK: [2013-02-22 Fri 13:00]--[2013-02-22 Fri 13:10] =>  0:10
** ULTIMATE There are states and there are labels for states
*** labels \in set of labels, e.g., Int, Bool, Void
*** VVIP You could have many different states having the SAME label! 
*** NOW you have something powerful enough to REPRESENT a type.
*** TODO So, does this mean a term automaton represents one and only one type?
*** Isn't that required when we youse 2 term automaton to DECIDE subtyping?
*** Anyway, this is a REALLY subtle point. Only if you look at the mathematical definition carefully and puzzle over it for a while will you get it.
** example of many states having the same label
*** basically, a regular type is one that has a finite number of subterms
*** for each subterm have a state
*** \mu.v((v -> \perp) -> T)
**** one state A for the first arrow =>  0: v-state, 1: \perp
**** one state B for the second arrow => 0: A, 1: T
** How to convert a regular type to a term automaton (for simple regular types as in the paper, not interfaces)
*** Q = one state for each subterm t \darr \alpha
*** q_0 = t
*** l(s) = s(\epsilon)
*** \delta(s, i) = (type for s)(i) (the notation in the paper is a bit hard to understand here, but I think this is the general idea)
** interface -> term automaton
*** Term Automaton = (\Sigma, Q, start, \delta, F)
*** \Sigma (input alphabet) = {0, 1} \cup {set of method names}
*** VVIP Set of labels = {Int, Bool, Void, ->, Interface}
*** VVIP Set of states = as many as there are subterms
**** so if you have int, etc. as an input or return type, you'll have a state for int (with label as Int, obviously). Name for a basic state like int will have name "int".
**** one state (with label ->) for each method's arrow (cos each is a potentially different subterm)
***** name: method name
***** label: ->
***** of course, if you have methods p and q with type (for example)
****** p: int -> int
****** q: int -> int
***** they both are the some subterm, but still have different states for them, just in case
**** one state for each interface (with label Interface)
***** name: interface name
***** label: Interface
*** start = Interface
*** F is not needed as of now
*** VVIP \delta (Interface, method) = ->
**** VVIP Note: there is no name for the ->. It is all structural! We don't compare by name, we compare by structure. We don't care if you have the same name or not.
*** \delta (->, 0) = input type
*** \delta (->, 1) = return type
*** VVIP I think that if the input or return type is another Interface, you have to add in all the states, methods, and edges of that Interface's Automaton
**** OUTDATED It's ok if that interface has a method with the same name as one of your methods but with a different type. Anyway, Interface only goes to "->" state.
*** So, you'll basically add in that interface's automaton, but whatever it refers to [your interface] just make it point to your Main Interface state
** term automaton * term automaton -> Product Automaton
*** Given two term automata M and N, we will construct a product automata (non-deterministic?)
*** We want to check whether M < N
*** A = (QA , Σ, q_{0}, δ A , F A )
*** QA = QM × QN × {0, 1}
*** VVIP Σ = \Sigma N
**** Basically, M should be able to respond to all inputs of N
*** qA = (qM , qN , 0) start state of A.
*** δ A : QA × Σ → QA .
*** For b, i ∈ Σ, p ∈ QM , and q ∈ QN , we have δ A ((p, q, b), i) = (δ M (p, i), δ N (q, i), b ⊕ πi) (⊕ = xor)
**** \Pi_i = parity of i
*** Final states
**** TODO Recall: s ≤ t iff {α ∈ D(s) ∩ D(t)|s(α) ≤πα t(α)}
***** Really???
***** VVIP Shouldn't it be "\alpha \in D(t)" alone?
***** In the definition of "subtyping", they say that every value described by s should be described by t
***** In the definition of "type ordering", they say that \alpha \in D(s) \cup D(t)
***** Let's try both and stick with the one that answers the test data
**** Goal: create an automata, where final states are denoted by states that will lead to ≤.
**** F A = {(p, q, b)|lM (p) ≤b lN (q)} l gives the label of that node.
***** OUTDATED Not sure what they mean by the label - ???. I'm assuming it is simply the state's name
** DFS: Can you reach some final state?
* Notes
** ULTIMATE TermAutomaton equals() BUG: Comparing the two deltaAdjacencyLists was causing the problem cos I hadn't defined hashCode for Symbol and State.
*** => "equal" States/Symbols were being hashed to different buckets.
*** This cost me 42 minutes and a lot of tension
** To run jdb on a test class
#+begin_example
jdb -sourcepathtests -classpathclass:class/tests:/usr/share/java/junit4-4.8.2.jar:/usr/share/java/hamcrest-core-1.1.jar org.junit.runner.JUnitCore TermAutomatonTest
#+end_example
* Test cases
** Pub0
*** A <= B ? // Yes
*** B <= A ? // No
** Pub1
*** A <= B ? // No
*** B <= A ? // Yes
** Pub2
*** C <= D ? // No
*** D <= C ? // Yes
** Pub3
*** I1 <= I2 ? // Yes
*** I2 <= I1 ? // Yes
*** I3 <= I4 ? // Yes
*** I5 <= I6 ? // Yes
*** I1 <= I5 ? // No
*** I3 <= I1 ? // No
** Pub4
*** A <= B ? // No
*** B <= A ? // No
* Code
** DONE Generate all the auxiliary JTB and JavaCC files
   CLOCK: [2013-02-24 Sun 21:44]--[2013-02-24 Sun 21:46] =>  0:02
** DONE Change my-java-project-dir
   CLOCK: [2013-02-24 Sun 21:46]--[2013-02-24 Sun 21:55] =>  0:09
** DONE Term Automaton class
   CLOCK: [2013-02-24 Sun 21:56]--[2013-02-24 Sun 23:02] =>  1:06
** DONE Add a trivial test file
   CLOCK: [2013-02-24 Sun 23:02]--[2013-02-24 Sun 23:02] =>  0:00
** DONE Extend GJVoidDepthFirst
   CLOCK: [2013-02-25 Mon 18:41]--[2013-02-25 Mon 19:04] =>  0:23
   CLOCK: [2013-02-24 Sun 23:09]--[2013-02-24 Sun 23:13] =>  0:04
*** DONE Look at Interface output of pub0.java
    CLOCK: [2013-02-25 Mon 19:05]--[2013-02-25 Mon 19:09] =>  0:04
*** DONE Think about design
    CLOCK: [2013-02-25 Mon 19:09]--[2013-02-25 Mon 19:28] =>  0:19
*** DONE Add global hash table of {interface name => Automaton}
    CLOCK: [2013-02-25 Mon 19:29]--[2013-02-25 Mon 19:30] =>  0:01
*** DONE Think about design
    CLOCK: [2013-02-25 Mon 19:31]--[2013-02-25 Mon 19:37] =>  0:06
*** DONE Fill out InterfaceMember
    CLOCK: [2013-02-25 Mon 21:27]--[2013-02-25 Mon 21:48] =>  0:21
    CLOCK: [2013-02-25 Mon 19:38]--[2013-02-25 Mon 19:47] =>  0:09
**** DONE addMethodTypeEdge in TermAutomaton
     CLOCK: [2013-02-25 Mon 20:29]--[2013-02-25 Mon 20:40] =>  0:11
***** DONE addEdge
      CLOCK: [2013-02-25 Mon 20:04]--[2013-02-25 Mon 20:29] =>  0:25
      CLOCK: [2013-02-25 Mon 19:47]--[2013-02-25 Mon 19:55] =>  0:08
***** DONE equals method for State and Symbol
      CLOCK: [2013-02-25 Mon 19:55]--[2013-02-25 Mon 20:01] =>  0:06
***** DONE debug equals method for TermAutomaton
      CLOCK: [2013-02-25 Mon 21:07]--[2013-02-25 Mon 21:19] =>  0:12
      CLOCK: [2013-02-25 Mon 20:40]--[2013-02-25 Mon 21:00] =>  0:20
****** DONE add toString methods to aid debugging 
       CLOCK: [2013-02-25 Mon 21:00]--[2013-02-25 Mon 21:07] =>  0:07
****** DONE Add hashCode to State
       CLOCK: [2013-02-25 Mon 21:20]--[2013-02-25 Mon 21:23] =>  0:03
****** DONE Add hashCode to Symbol
** DONE Test simple interface
   CLOCK: [2013-02-26 Tue 15:37]--[2013-02-26 Tue 15:42] =>  0:05
*** get the generated Automata
    CLOCK: [2013-02-26 Tue 15:42]--[2013-02-26 Tue 15:43] =>  0:01
*** build expected automata
    CLOCK: [2013-02-26 Tue 15:44]--[2013-02-26 Tue 15:52] =>  0:08
*** DONE test equality
    CLOCK: [2013-02-26 Tue 15:52]--[2013-02-26 Tue 15:53] =>  0:01
**** DONE Make the Lists in TermAutomaton into Sets
     CLOCK: [2013-02-26 Tue 15:53]--[2013-02-26 Tue 15:56] =>  0:03
***** DONE implement comparable for Symbol
      CLOCK: [2013-02-26 Tue 15:56]--[2013-02-26 Tue 16:02] =>  0:06
***** DONE implement comparable for State
      CLOCK: [2013-02-26 Tue 16:00]--[2013-02-26 Tue 16:15] =>  0:15
***** DONE make inputAlphabet a set
      CLOCK: [2013-02-26 Tue 16:19]--[2013-02-26 Tue 16:23] =>  0:04
***** DONE Make states a set
      CLOCK: [2013-02-26 Tue 16:24]--[2013-02-26 Tue 16:24] =>  0:00
** DONE Test self-recursive interface
   CLOCK: [2013-02-26 Tue 16:28]--[2013-02-26 Tue 16:28] =>  0:00
*** DONE build expected interface
    CLOCK: [2013-02-26 Tue 16:28]--[2013-02-26 Tue 16:32] =>  0:04
** DONE Test mutually recursive interface
   CLOCK: [2013-02-26 Tue 16:32]--[2013-02-26 Tue 16:35] =>  0:03
** OUTDATED STUCK: How can one arrow have multiple 0s and 1s going out of it (as it has in the current definition)?
*** Should we have multiple arrows (one for each method)?
*** But then, what happens to only comparing by structure??
*** VVIP Maybe, here we give it a bit of leeway cos this is Structural Subtyping in Java. It's basically comparing by name (at least for method names)
*** So, maybe this is the solution: do structural subtyping for the INTERFACE, but nominal AND structural subtyping for methods
**** for method X to be a subtype of method Y, X and Y must have the same name
**** Further, the usual contravariant and covariant conditions must hold
** DONE Add id to State
   CLOCK: [2013-02-27 Wed 13:04]--[2013-02-27 Wed 13:04] =>  0:00
   CLOCK: [2013-02-27 Wed 12:22]--[2013-02-27 Wed 12:33] =>  0:11
*** DONE don't use id in hashCode
    CLOCK: [2013-02-27 Wed 13:04]--[2013-02-27 Wed 13:05] =>  0:01
** DONE Update self-recursive test
   CLOCK: [2013-02-27 Wed 21:56]--[2013-02-27 Wed 22:40] =>  0:44
   :PROPERTIES:
   :Effort:   10
   :END:
*** what took me so long?
*** major bug with the strings "interface" vs "Interface"
** DONE Update mutually-recursive test
   CLOCK: [2013-02-27 Wed 22:41]--[2013-02-27 Wed 22:48] =>  0:07
   :PROPERTIES:
   :Effort:   10
   :END:
** TODO Build full term automata by replacing one automaton in another
   CLOCK: [2013-02-26 Tue 16:35]--[2013-02-26 Tue 16:46] =>  0:11
*** DONE Think
    CLOCK: [2013-02-27 Wed 22:48]--[2013-02-27 Wed 23:18] =>  0:30
*** My technique: Put everything together. Do a DFS from the currInterfaceState.
**** Pack those states that are not connected to currInterfaceState.
*** DONE Add currInterfaceName field to all states
    CLOCK: [2013-02-27 Wed 23:23]--[2013-02-27 Wed 23:56] =>  0:33
*** TODO Put everything together
    CLOCK: [2013-02-28 Thu 00:10]--[2013-02-28 Thu 00:11] =>  0:01
    CLOCK: [2013-02-27 Wed 23:59]--[2013-02-28 Thu 00:06] =>  0:07
**** DONE Making State equals() consider name as well
     CLOCK: [2013-02-28 Thu 00:12]--[2013-02-28 Thu 00:13] =>  0:01
**** DONE Think about how to include an automaton in another
     CLOCK: [2013-02-28 Thu 00:13]--[2013-02-28 Thu 00:32] =>  0:19
**** DONE Add a copy constructor in State
     CLOCK: [2013-02-28 Thu 00:32]--[2013-02-28 Thu 00:37] =>  0:05
**** TODO includeOtherAutomatonDefinition
     CLOCK: [2013-02-28 Thu 00:37]--[2013-02-28 Thu 01:29] =>  0:52
***** TODO problem when adding State (m, ->, B) to this.states which has State (m, ->, A)
***** Why?
*** TODO Do a DFS from currInterfaceState and change each visited node's currInterfaceName to currInterfaceState's name
*** TODO Pack all non-visited nodes
** TODO Build product automata
   :PROPERTIES:
   :Effort:   1h
   :END:
** TODO DFS on the product automata
   :PROPERTIES:
   :Effort:   1h
   :END:

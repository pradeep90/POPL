# -*- org-pretty-entities-include-sub-superscripts: nil; -*-

				Notes
				
* Instructions to compile and run the code
** To get JavaCC grammar, syntax-tree-code classes, and default visitors
   jtb minijava.jj
** To generate a parser
   javacc jtb.out.jj
** Compile Main.java which calls the parser and the visitors
   javac Main.java
** Build a syntax tree and execute the visitors for Foo.java
   java Main < Foo.java
* Differences between Mini Java and Micro Java
** Mini Java
*** Summary
**** Methods have return values
**** CANNOT access an obj's data items
*** array has .length field
*** main() method contains just a print statement
*** has MessageSend expression (NOT statement)
*** Primary Expression can be Identifier but not VarRef
** Micro Java
*** Summary
**** Methods don't have return values
**** No main() method
**** Can access an obj's data items
**** You CAN'T call this.anything().
***** You have to have foo = this; foo.anything()
*** no length
*** main() has an instantiation of a class and calling of a method.
*** All methods have void as return type. Return value is stored in a variable.  e.g., ____1234ComputeFac4321____
**** => No return statement
*** Assignment statement must be "variable = "
*** Array Assignment statement must be "arr[ expr ] ="
*** Has Message send as a STATEMENT (id.id(expression list)) with lookahead "id.id("
*** VarRef can be foo.bar or baz
*** Primary Expression can be VarRef but not Identifier
* Node-by-node difference
** Main
*** print statement vs the New class generation (I think you'd need to store the new class' source string in memory and print it at the end...???) => Nah. You just do it in Goal(). Remember it perhaps in Main() and print it after all the Type declarations.
** Method declaration
*** Have a variable for return value
*** Append "return_value = value" to the method body
** Method call => Message send statement
*** get all the args' values
*** call the method
*** return the return value if needed
** TODO array.length
* General notes
** GJ* uses Java with Generics
** I guess I don't have a way to compare two syntax trees. So, to test that my generated MicroJava code is OK, I'm gonna test if it is valid MicroJava and 
** TODO Not able to force the execute target to run ONLY when everything has been compiled. It all works ONLY when I add a -B flag. Have to sort out Make dependencies.
** TODO Not able to figure out how to use relative paths for input test source files. Winging it for now.
** TODO Move the pretty-printing code to a class of its own
* GLINTs - PCQ|FCK|AIR|POV
** Purpose - Use JTB and JavaCC to write a MiniJava to MicroJava translator for valid MiniJava programs.
** CQ - (several ways + answer/opinion/>1 POV) => How to produce MicroJava code for each of the syntax tree nodes?
*** How to transform a MiniJava parse tree to a MicroJava parse tree (and then convert that to MicroJava source code)?
*** There exist Answers
** Assumptions (justifiable?)
*** By printing out stuff at each node, you can get the MicroJava equivalent. Seems to work cos MicroJava is a subset of MiniJava.
** POV - (other POVs + Ss and Ws)
** Information, Data, Evidence (for and against)
** Key concepts and ideas - (CAPRDBLF)
*** Testing:
**** Code string (input stream) => MiniJavaParser => root node
**** root.accept(Visitor) => Visitor will print stuff as well as accumulate the final string. You can use that for testing. 
** Implications/Conclusions (in terms of Nec/Suff cond) -
*** Clarity (SEEI your conclusion or solution as an answer to CQ and fulfill the Purpose)
** What surprised me -
** Relation to my life / Actions -
** Next Actions - DRFMF / Chunk + Repetition + Feel
* Plan
** DONE Makefile
** DONE Add some features
* Outline
** DONE Compare and contrast the two grammars
** DONE Trivial code
** DONE Unit test for some simple transformation code
   CLOCK: [2013-01-28 Mon 17:20]--[2013-01-28 Mon 17:50] =>  0:30
** Check out relative packages - http://xahlee.info/java-a-day/package.html
** TODO Unit test for transformation of only main class
   CLOCK: [2013-01-28 Mon 17:51]--[2013-01-28 Mon 19:05] =>  1:14
** Add features one by one

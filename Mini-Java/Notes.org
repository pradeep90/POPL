# -*- org-pretty-entities-include-sub-superscripts: nil; -*-

				Notes
				
* Instructions to compile and run the code
** To get JavaCC grammar, syntax-tree-code classes, and default visitors
   jtb minijava.jj
** To generate a parser
   javacc jtb.out.jj
** Compile Main.java which calls the parser and the visitors
   javac Main.java
** Build a syntax tree and execute the visitors for Foo.java
   java Main < Foo.java
* Differences between Mini Java and Micro Java
** Mini Java
*** Summary
**** Methods have return values
**** CANNOT access an obj's data items
*** array has .length field
*** main() method contains just a print statement
*** has MessageSend expression (NOT statement)
*** Primary Expression can be Identifier but not VarRef
** Micro Java
*** Summary
**** Methods don't have return values
**** No main() method
**** Can access an obj's data items
**** You CAN'T call this.anything().
***** You have to have foo = this; foo.anything()
*** no length
*** main() has an instantiation of a class and calling of a method.
*** All methods have void as return type. Return value is stored in a variable.  e.g., ____1234ComputeFac4321____
**** => No return statement
*** Assignment statement must be "variable = "
*** Array Assignment statement must be "arr[ expr ] ="
*** Has Message send as a STATEMENT (id.id(expression list)) with lookahead "id.id("
*** VarRef can be foo.bar or baz
*** Primary Expression can be VarRef but not Identifier
* Node-by-node difference
** Main
*** print statement vs the New class generation (I think you'd need to store the new class' source string in memory and print it at the end...???) => Nah. You just do it in Goal(). Remember it perhaps in Main() and print it after all the Type declarations.
** Method declaration
*** Have a variable for return value
*** Append "return_value = value" to the method body
** Method call => Message send statement
*** get all the args' values
*** call the method
*** return the return value if needed
** TODO array.length
* GLINTs - PCQ|FCK|AIR|POV
** Purpose - Use JTB and JavaCC to write a MiniJava to MicroJava translator for valid MiniJava programs.
** CQ - (several ways + answer/opinion/>1 POV) => How to produce MicroJava code for each of the syntax tree nodes?
*** How to transform a MiniJava parse tree to a MicroJava parse tree (and then convert that to MicroJava source code)?
*** There exist Answers
** Assumptions (justifiable?)
*** By printing out stuff at each node, you can get the MicroJava equivalent. Seems to work cos MicroJava is a subset of MiniJava.
** POV - (other POVs + Ss and Ws)
** Information, Data, Evidence (for and against)
** Key concepts and ideas - (CAPRDBLF)
*** Testing:
**** Code string (input stream) => MiniJavaParser => root node
**** root.accept(Visitor) => Visitor will print stuff as well as accumulate the final string. You can use that for testing. 
** Implications/Conclusions (in terms of Nec/Suff cond) -
*** Clarity (SEEI your conclusion or solution as an answer to CQ and fulfill the Purpose)
** What surprised me -
** Relation to my life / Actions -
** Next Actions - DRFMF / Chunk + Repetition + Feel
* General notes
** GJ* uses Java with Generics
** I guess I don't have a way to compare two syntax trees. So, to test that my generated MicroJava code is OK, I'm gonna test if it is valid MicroJava and 
** TODO Not able to force the execute target to run ONLY when everything has been compiled. It all works ONLY when I add a -B flag. Have to sort out Make dependencies.
** TODO Not able to figure out how to use relative paths for input test source files. Winging it for now.
** TODO Move the pretty-printing code to a class of its own
** TODO Maybe construct a MicroJava syntax tree instead of constructing a string version of the same
*** I think I should use GJNoArguVisitor or GJDepthFirst so that each visit() method will return a Node
*** Check out [[file:~/Downloads/Applications/Expression_GJ_Pro.jar][Expression_Gj_Pro]] for an example of Generics and return value for visit
*** VVIP Even if I use Generics, there's an awful lot of Casting going on cos I'm trying to construct a parse tree of some other class hierarchy. I think this is unavoidable. You have to encode that information somewhere.
** VVIP Big bug => In my test fixtures, I had been passing the same node twice e.g., (prim, prim). I'd done this at several levels.
** Note: the big instantiation and method call statement in the Main Class's main method is an exception. Usually, instantiation and method call are broken apart.
** Note: Temporary variables are numbered uniquely globally (not just within local scope).
** Assuming ELSE body can have more than one statement (check out BinaryTree.microjava).
* Outline
** DONE Compare and contrast the two grammars
** DONE Trivial code
** DONE Unit test for some simple transformation code
   CLOCK: [2013-01-28 Mon 17:20]--[2013-01-28 Mon 17:50] =>  0:30
** DONE Check out relative packages - http://xahlee.info/java-a-day/package.html
** DONE Make unit testing very easy
   CLOCK: [2013-01-28 Mon 17:51]--[2013-01-28 Mon 19:05] =>  1:14
** DONE Make microjavaparser.syntaxtree.Node be available as Node and make the normal Node be syntaxtree.Node 
** DONE Check whether you can compare two Nodes
   CLOCK: [2013-01-30 Wed 10:01]--[2013-01-30 Wed 10:02] =>  0:01
   CLOCK: [2013-01-30 Wed 09:41]--[2013-01-30 Wed 10:01] =>  0:20
   CLOCK: [2013-01-30 Wed 09:15]--[2013-01-30 Wed 09:38] =>  0:23
** TODO Goal, main, class declaration, method, assignment statement
   CLOCK: [2013-01-30 Wed 05:26]--[2013-01-30 Wed 05:52] =>  0:26
   CLOCK: [2013-01-30 Wed 04:18]--[2013-01-30 Wed 05:23] =>  1:05
** DONE Identifier
   CLOCK: [2013-01-30 Wed 10:30]--[2013-01-30 Wed 11:00] =>  0:30
** DONE FalseLiteral
   CLOCK: [2013-01-30 Wed 12:51]--[2013-01-30 Wed 12:53] =>  0:02
** DONE Other stuff
   CLOCK: [2013-01-30 Wed 21:29]--[2013-01-30 Wed 23:49] =>  2:20
   CLOCK: [2013-01-30 Wed 21:29]--[2013-01-30 Wed 22:22] =>  0:53
   CLOCK: [2013-01-30 Wed 15:05]--[2013-01-30 Wed 16:05] =>  1:00
   CLOCK: [2013-01-30 Wed 12:53]--[2013-01-30 Wed 14:11] =>  1:18
** DONE MainClass
   CLOCK: [2013-01-31 Thu 20:51]--[2013-01-31 Thu 22:25] =>  1:34
** DONE Type
   CLOCK: [2013-01-31 Thu 23:12]--[2013-01-31 Thu 23:13] =>  0:01
** DONE ClassDeclaration, ClassExtendsDeclaration
   CLOCK: [2013-01-31 Thu 23:14]--[2013-01-31 Thu 23:22] =>  0:08
** DONE TypeDeclaration
   CLOCK: [2013-01-31 Thu 23:23]--[2013-01-31 Thu 23:30] =>  0:07
** DONE Statement
   CLOCK: [2013-01-31 Thu 23:30]--[2013-01-31 Thu 23:36] =>  0:06
** DONE Expression
   CLOCK: [2013-01-31 Thu 23:36]--[2013-01-31 Thu 23:47] =>  0:11
** DONE PrimaryExpression
   CLOCK: [2013-01-31 Thu 23:47]--[2013-01-31 Thu 23:56] =>  0:09
** DONE Clean up stuff in getNewMainClass
   CLOCK: [2013-02-01 Fri 00:45]--[2013-02-01 Fri 00:47] =>  0:02
   CLOCK: [2013-02-01 Fri 00:28]--[2013-02-01 Fri 00:33] =>  0:05
** DONE Have a new type: ExpansionNode, which would implement Node.
   CLOCK: [2013-02-01 Fri 01:47]--[2013-02-01 Fri 02:20] =>  0:33
** DONE Modify it all to use ExpansionNode
   CLOCK: [2013-02-01 Fri 02:20]--[2013-02-01 Fri 03:47] =>  1:27
** DONE ArrayLength
   CLOCK: [2013-02-01 Fri 11:37]--[2013-02-01 Fri 13:24] =>  1:47
*** temporary variable for the PrimaryExpression
*** then simply do varref
*** Return nodelist
** DONE Maybe make complex methods like PrintStatement, Method Declaration, Message Send, etc. return a NodeListOptional of the different nodes they generate.
*** I think you need something more for Message Send, though
** DONE Simple nodes => use ExpansionNode
   CLOCK: [2013-02-01 Fri 13:41]--[2013-02-01 Fri 15:01] =>  1:20
** DONE What if there are multiple print statements in a method? Don't declare the print variable more than once.
** DONE MainOnly
** DONE Expression
** DONE AssignmentStatement
*** VarRef not Identifier
** DONE PrintStatement
*** return aux statements and then the print statement
** DONE MethodDeclaration
   CLOCK: [2013-02-01 Fri 15:12]--[2013-02-01 Fri 16:31] =>  1:19
*** return return value storage variable and MethodDeclaration
** DONE MessageSend
   CLOCK: [2013-02-01 Fri 16:54]--[2013-02-01 Fri 16:59] =>  0:05
   CLOCK: [2013-02-01 Fri 16:31]--[2013-02-01 Fri 16:53] =>  0:22
** DONE General stock-keeping
   CLOCK: [2013-02-01 Fri 16:53]--[2013-02-01 Fri 17:30] =>  0:37
** DONE Wrapup Code for final code testing
   CLOCK: [2013-02-01 Fri 18:28]--[2013-02-01 Fri 19:10] =>  0:42
** DONE MessageSend STATEMENT: get the return value in a temporary variable and send it as an IDENTIFIER expression.
   CLOCK: [2013-02-01 Fri 19:32]--[2013-02-01 Fri 19:38] =>  0:06
   CLOCK: [2013-02-01 Fri 19:11]--[2013-02-01 Fri 19:30] =>  0:19
** DONE ELSE: assignment statements - make them happen within the else body itself.
   CLOCK: [2013-02-01 Fri 19:38]--[2013-02-01 Fri 20:12] =>  0:34
** DONE WHILE: assignment statements - make them happen within the body itself.
   CLOCK: [2013-02-01 Fri 20:12]--[2013-02-01 Fri 20:17] =>  0:05
** DONE Have method return value variable in ClassDeclaration
   CLOCK: [2013-02-01 Fri 20:41]--[2013-02-01 Fri 20:49] =>  0:08
   CLOCK: [2013-02-01 Fri 20:17]--[2013-02-01 Fri 20:20] =>  0:03
** DONE Counter for temporary variables => getNewTempVarName
   CLOCK: [2013-02-01 Fri 20:21]--[2013-02-01 Fri 20:41] =>  0:20
** TODO Map temporary variable names to their Types - till then maybe name the Type as TYPE + TEMPNAME
** DONE Proper name for return variables
** TODO getNewMainClass special case: Make sure you include the varDeclarations and precedingNodes
** TODO MethodDeclaration: writable argument => Need to replace original argument with this variable everywhere.
*** Maybe do that in the second pass

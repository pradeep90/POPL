			  Interpreter Notes

* TODO Check out outline resources for writing a Java interpreter (maybe EOPL will have some guidance here or some other recommended book)
* What I need to implement for the interpreter
** Cell
** Environment: <identifier, cell>
** Closure (for methods) (along with the `this` variable)
** Mutually recursive methods? => Recursive environment (maybe subclasses Environment)
** Class class (with vtable)
* Notes
** Am going with the PLAI idea of having an Environment and a Store. Environment alone won't do the trick. Plus, it's all assign by reference, so you need to keep track of the original value somewhere.
** VVIP BUG: I was using == instead of .equals in the equals method everywhere.
** VVIP Remember: you should keep passing the updated store in store-passing style (duh) for each successive sub-expression
** VVIP Remember to make a copy of Store or Environment so that the original instance doesn't get changed
** VVIP Choosing to consider all the VarDeclarations at the beginning of a method or a class as members of a let declaration (i.e., they extend the environment for the scope of the method)
** Store: needed??
*** <Location, Value>
*** Updating value
**** integer - no problem. Just update the original IntegerValue.
**** boolean - ditto
**** array access - just access the ArrayValue
**** objects - 
*** ULTIMATE Nope. The problem is: what do you return to the user so that he can modify the value later?
**** You can return the Value itself. The object will be changed in the store and can be accessed there as needed. It is an object. Java has mutation, so you don't need to implement Boxes.
*** The only reason I think we used a Store in PLAI was because we wanted to show that we could implement Mutation even in languages that didn't support mutation.
*** In fact, I think you don't even need the Store. The Environment (this time - <String, Value>) will suffice.
**** integer - modify the IntegerValue. Note: We're having IntegerValue instead of just int cos we want to subclass Value. Else, we could just have had ints.
**** boolean - ditto
**** array - ArrayValue
**** object - ObjectValue
*** Note: In PLAI, we also used the Store to keep track of Values that weren't bound to some variable. Cos the interpreter is in Java here, we don't need to do that extra book-keeping. We use Java's Store as our Store.
** I'm doing env.extend(identifier, type) in VarDeclaration, etc. Might lead to the same identifier instance coming up everywhere and then TreeFormatter would crash. Check it out if needed.
* Plan of action
** DONE Build an Environment class
   CLOCK: [2013-02-06 Wed 09:31]--[2013-02-06 Wed 10:47] =>  1:16
*** DONE Binding
*** DONE empty-env
*** DONE extend-env
** DONE Build a Store class (I'm just having it as an alias for HashMap)
*** DONE Location
*** DONE Storage <Location, Value>
*** DONE Store
*** DONE empty-store
*** DONE override-store
** DONE Build a Value class
** DONE Subclass Value
** DONE Result <Value, Store>
   CLOCK: [2013-02-06 Wed 11:09]--[2013-02-06 Wed 11:10] =>  0:01
   CLOCK: [2013-02-06 Wed 11:02]--[2013-02-06 Wed 11:08] =>  0:06
** DONE lookup symbol * env => Location
** DONE fetch Location * Store => Value
** DONE new-loc
** DONE Move to Interpreter <Value, Environment>
   CLOCK: [2013-02-10 Sun 20:44]--[2013-02-10 Sun 21:17] =>  0:33
** DONE Have NullValue to represent semantic value of No Value
   CLOCK: [2013-02-10 Sun 21:20]--[2013-02-10 Sun 21:37] =>  0:17
** DONE Make sure you are passing the environment in "store-passing" style => No need.
    CLOCK: [2013-02-11 Mon 00:10]--[2013-02-11 Mon 00:13] =>  0:03
*** There is only one "global" environment at any time. Cos of Java being mutation-friendly, it is already being passed in store-passing style.
** DONE Overall execution plan					    :ARCHIVE:
   CLOCK: [2013-02-11 Mon 15:32]--[2013-02-11 Mon 16:00] =>  0:28
   CLOCK: [2013-02-11 Mon 15:23]--[2013-02-11 Mon 15:32] =>  0:09
*** Build a symbol table containing the class and method definitions
**** Class
***** Identifier name
***** VarDeclarations
***** their methods (as Closures)
*** Go to the Main Class and execute its main method.
**** i.e., call applyClosure on its main method
** DONE Closure
*** DONE without arguments
    CLOCK: [2013-02-12 Tue 19:54]--[2013-02-12 Tue 20:14] =>  0:20
*** DONE expression list
    CLOCK: [2013-02-12 Tue 20:42]--[2013-02-12 Tue 21:03] =>  0:21
    CLOCK: [2013-02-12 Tue 20:14]--[2013-02-12 Tue 20:30] =>  0:16
* DONE Interpret trivial stuff using the environment
  CLOCK: [2013-02-06 Wed 11:16]--[2013-02-06 Wed 12:21] =>  1:05
** DONE identifier
   CLOCK: [2013-02-10 Sun 20:40]--[2013-02-10 Sun 20:43] =>  0:03
   CLOCK: [2013-02-06 Wed 12:23]--[2013-02-06 Wed 12:32] =>  0:09
** ??? testNodeToken(){
** DONE testThisExpression(){
   CLOCK: [2013-02-06 Wed 12:36]--[2013-02-06 Wed 12:46] =>  0:10
** DONE testIdentifier(){
** DONE testFalseLiteral(){
** DONE testTrueLiteral(){
** DONE testIntegerLiteral(){
   CLOCK: [2013-02-06 Wed 12:46]--[2013-02-06 Wed 12:50] =>  0:04
** DONE testArrayAllocationExpression(){
   CLOCK: [2013-02-06 Wed 12:50]--[2013-02-06 Wed 12:55] =>  0:05
** DONE testBracketExpression(){
   CLOCK: [2013-02-06 Wed 12:56]--[2013-02-06 Wed 12:58] =>  0:02
** DONE testNotExpression(){
   CLOCK: [2013-02-06 Wed 12:58]--[2013-02-06 Wed 13:19] =>  0:21
** DONE testPrintStatement(){
   CLOCK: [2013-02-06 Wed 13:42]--[2013-02-06 Wed 13:55] =>  0:13
** DONE testArrayAssignmentStatement(){
   CLOCK: [2013-02-10 Sun 22:12]--[2013-02-10 Sun 22:20] =>  0:08
   CLOCK: [2013-02-08 Fri 13:11]--[2013-02-08 Fri 13:17] =>  0:06
** DONE testTimesExpression(){
   CLOCK: [2013-02-08 Fri 13:17]--[2013-02-08 Fri 13:22] =>  0:05
** DONE testArrayLookup(){
   CLOCK: [2013-02-10 Sun 21:39]--[2013-02-10 Sun 22:12] =>  0:33
   CLOCK: [2013-02-09 Sat 20:32]--[2013-02-09 Sat 20:57] =>  0:25
   CLOCK: [2013-02-08 Fri 14:26]--[2013-02-08 Fri 14:41] =>  0:15
** DONE testMinusExpression(){
   CLOCK: [2013-02-08 Fri 13:22]--[2013-02-08 Fri 13:23] =>  0:01
** DONE testPlusExpression(){
   CLOCK: [2013-02-08 Fri 13:23]--[2013-02-08 Fri 13:24] =>  0:01
** DONE testCompareExpression(){
   CLOCK: [2013-02-08 Fri 13:25]--[2013-02-08 Fri 13:26] =>  0:01
** DONE testAndExpression(){
   CLOCK: [2013-02-08 Fri 13:26]--[2013-02-08 Fri 13:31] =>  0:05
** DONE testVarRef()
   CLOCK: [2013-02-08 Fri 14:04]--[2013-02-08 Fri 14:24] =>  0:20
** DONE testAssignmentStatement(){
   CLOCK: [2013-02-10 Sun 22:20]--[2013-02-10 Sun 22:29] =>  0:09
   CLOCK: [2013-02-10 Sun 21:38]--[2013-02-10 Sun 21:38] =>  0:00
** DONE testIntegerType(){
   CLOCK: [2013-02-08 Fri 13:32]--[2013-02-08 Fri 13:34] =>  0:02
** DONE testBooleanType(){
   CLOCK: [2013-02-08 Fri 13:34]--[2013-02-08 Fri 13:35] =>  0:01
** DONE testArrayType(){
** DONE testType(){
   CLOCK: [2013-02-08 Fri 13:35]--[2013-02-08 Fri 13:44] =>  0:09
** DONE testVarDeclaration(){
   CLOCK: [2013-02-08 Fri 13:46]--[2013-02-08 Fri 14:01] =>  0:15
** DONE testWhileStatement(){
   CLOCK: [2013-02-11 Mon 11:55]--[2013-02-11 Mon 12:14] =>  0:19
** DONE testIfStatement(){
   CLOCK: [2013-02-10 Sun 23:55]--[2013-02-11 Mon 00:10] =>  0:15
   CLOCK: [2013-02-10 Sun 23:36]--[2013-02-10 Sun 23:39] =>  0:03
** DONE testNodeOptional(){
   CLOCK: [2013-02-11 Mon 12:14]--[2013-02-11 Mon 12:15] =>  0:01
** DONE testNodeListOptional(){
   CLOCK: [2013-02-11 Mon 12:15]--[2013-02-11 Mon 12:15] =>  0:00
** DONE testBlock(){
   CLOCK: [2013-02-11 Mon 12:16]--[2013-02-11 Mon 12:20] =>  0:04
** DONE testStatement(){
* More complex stuff
** DONE Class declaration
   CLOCK: [2013-02-11 Mon 16:59]--[2013-02-11 Mon 17:59] =>  1:00
** DONE Class extends
   CLOCK: [2013-02-11 Mon 17:59]--[2013-02-11 Mon 18:27] =>  0:28
** DONE testAllocationExpression(){ (wait for class implementation)
   CLOCK: [2013-02-11 Mon 18:44]--[2013-02-11 Mon 18:58] =>  0:14
** DONE test dot expression VarRef
   CLOCK: [2013-02-11 Mon 20:55]--[2013-02-11 Mon 21:14] =>  0:19
** DONE Closure
   CLOCK: [2013-02-11 Mon 13:53]--[2013-02-11 Mon 14:19] =>  0:26
   CLOCK: [2013-02-11 Mon 12:29]--[2013-02-11 Mon 12:52] =>  0:23
*** Environment
*** this
*** MethodDeclaration
** DONE Methods
*** DONE testMethodDeclaration(){
   CLOCK: [2013-02-11 Mon 15:03]--[2013-02-11 Mon 15:14] =>  0:11
   CLOCK: [2013-02-11 Mon 14:52]--[2013-02-11 Mon 14:58] =>  0:06
   CLOCK: [2013-02-11 Mon 14:19]--[2013-02-11 Mon 14:40] =>  0:21
** DONE Class ObjectValue
   CLOCK: [2013-02-11 Mon 20:28]--[2013-02-11 Mon 20:55] =>  0:27
   CLOCK: [2013-02-11 Mon 19:08]--[2013-02-11 Mon 19:31] =>  0:23
   CLOCK: [2013-02-11 Mon 19:01]--[2013-02-11 Mon 19:03] =>  0:02
   CLOCK: [2013-02-11 Mon 15:14]--[2013-02-11 Mon 15:22] =>  0:08
*** DONE new FooClass()
**** get FooClass from the symbol table
**** Fill env with the FooClass' VarDeclarations
**** Put ("this", self) in the environment
***** Not doing this cos testing equality (not identicality) for environment becomes impossible (as a consequence of the self-reference)
*** DONE foo.baz
**** look it up in env
*** DONE foo.bar(params)
**** runClosure on bar with "this", env, and params as arguments
**** VVIP Pass in the current environment to be the closure's environment
***** VVIP Design choice: I'm not using real Closures here (sending functions around as values). Instead, I'm storing a function in a central location and merely looking it up when I want to run it.
** DONE testExpressionRest(){ [STUCK HERE - Figure out how to "interpret" expression lists, etc.]
   CLOCK: [2013-02-06 Wed 13:19]--[2013-02-06 Wed 13:21] =>  0:02
*** It is part of a message send (method call), so get the list of formal params from the method closure and bind each parameter to the corresponding argument value in the CLOSURE's environment
** DONE testExpressionList(){
** DONE testFormalParameter(){
   CLOCK: [2013-02-11 Mon 18:40]--[2013-02-11 Mon 18:43] =>  0:03
** DONE testFormalParameterRest(){
   CLOCK: [2013-02-11 Mon 18:43]--[2013-02-11 Mon 18:44] =>  0:01
** DONE testFormalParameterList(){
** DONE testMessageSend(){
   CLOCK: [2013-02-12 Tue 21:04]--[2013-02-12 Tue 21:15] =>  0:11
** DONE Add a global variable for "this"
   CLOCK: [2013-02-12 Tue 21:15]--[2013-02-12 Tue 21:38] =>  0:23
** DONE Recursive method
   CLOCK: [2013-02-12 Tue 21:38]--[2013-02-12 Tue 22:15] =>  0:37
** DONE testGoal(){
** DONE testClassDeclaration(){
** DONE testClassExtendsDeclaration(){
** DONE testTypeDeclaration(){
** DONE testMainClass(){
   CLOCK: [2013-02-12 Tue 23:02]--[2013-02-12 Tue 23:16] =>  0:14
   CLOCK: [2013-02-12 Tue 22:39]--[2013-02-12 Tue 23:02] =>  0:23
** TODO Inheritance
** DONE testArrayLength
   CLOCK: [2013-02-13 Wed 09:13]--[2013-02-13 Wed 09:44] =>  0:31
** TODO Handle array.length separately, if needed
** TODO Learn the basics of using a Debugger

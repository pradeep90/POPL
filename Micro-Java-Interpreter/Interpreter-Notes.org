			  Interpreter Notes

* TODO Check out outline resources for writing a Java interpreter (maybe EOPL will have some guidance here or some other recommended book)
* What I need to implement for the interpreter
** Cell
** Environment: <identifier, cell>
** Closure (for methods) (along with the `this` variable)
** Mutually recursive methods? => Recursive environment (maybe subclasses Environment)
** Class class (with vtable)
* Notes
** Am going with the PLAI idea of having an Environment and a Store. Environment alone won't do the trick. Plus, it's all assign by reference, so you need to keep track of the original value somewhere.
** VVIP BUG: I was using == instead of .equals in the equals method everywhere.
* Plan of action
** DONE Build an Environment class
   CLOCK: [2013-02-06 Wed 09:31]--[2013-02-06 Wed 10:47] =>  1:16
*** DONE Binding
*** DONE empty-env
*** DONE extend-env
** DONE Build a Store class (I'm just having it as an alias for HashMap)
*** DONE Location
*** DONE Storage <Location, Value>
*** DONE Store
*** DONE empty-store
*** DONE override-store
** DONE Build a Value class
** DONE Subclass Value
** DONE Result <Value, Store>
   CLOCK: [2013-02-06 Wed 11:09]--[2013-02-06 Wed 11:10] =>  0:01
   CLOCK: [2013-02-06 Wed 11:02]--[2013-02-06 Wed 11:08] =>  0:06
** DONE lookup symbol * env => Location
** DONE fetch Location * Store => Value
** DONE new-loc
* TODO Interpret trivial stuff using the environment
  CLOCK: [2013-02-06 Wed 11:16]--[2013-02-06 Wed 12:21] =>  1:05
*** DONE identifier
    CLOCK: [2013-02-06 Wed 12:23]--[2013-02-06 Wed 12:32] =>  0:09
*** ??? testNodeToken(){
*** DONE testThisExpression(){
    CLOCK: [2013-02-06 Wed 12:36]--[2013-02-06 Wed 12:46] =>  0:10
*** DONE testIdentifier(){
*** DONE testFalseLiteral(){
*** DONE testTrueLiteral(){
*** DONE testIntegerLiteral(){
    CLOCK: [2013-02-06 Wed 12:46]--[2013-02-06 Wed 12:50] =>  0:04
*** DONE testArrayAllocationExpression(){
    CLOCK: [2013-02-06 Wed 12:50]--[2013-02-06 Wed 12:55] =>  0:05
*** TODO testAllocationExpression(){ (wait for class implementation)
*** DONE testBracketExpression(){
    CLOCK: [2013-02-06 Wed 12:56]--[2013-02-06 Wed 12:58] =>  0:02
*** DONE testNotExpression(){
    CLOCK: [2013-02-06 Wed 12:58]--[2013-02-06 Wed 13:19] =>  0:21
*** TODO testExpressionRest(){ [STUCK HERE - Figure out how to "interpret" expression lists, etc.]
    CLOCK: [2013-02-06 Wed 13:19]--[2013-02-06 Wed 13:21] =>  0:02
**** It is part of a message send (method call), so get the list of formal params from the method closure and bind each parameter to the corresponding argument value in the CLOSURE's environment
*** DONE testPrintStatement(){
    CLOCK: [2013-02-06 Wed 13:42]--[2013-02-06 Wed 13:55] =>  0:13
*** testArrayAssignmentStatement(){
*** testTimesExpression(){
*** testArrayLookup(){
*** testMinusExpression(){
*** testPlusExpression(){
*** testCompareExpression(){
*** testAndExpression(){
*** testAssignmentStatement(){
*** testIntegerType(){
*** testBooleanType(){
*** testArrayType(){
*** testType(){
*** testFormalParameter(){
*** testFormalParameterRest(){
*** testVarDeclaration(){
*** testWhileStatement(){
*** testIfStatement(){
*** testNodeOptional(){
*** testNodeListOptional(){
*** testBlock(){
*** testExpressionList(){
*** testFormalParameterList(){
*** testGetNewMainClass(){
*** testGoal(){
*** testClassDeclaration(){
*** testClassExtendsDeclaration(){
*** testTypeDeclaration(){
*** testStatement(){
*** testExpression(){
*** testPrimaryExpression(){
*** testMainClass(){
*** testArrayLength_ArrayAllocationExpression(){
*** testArrayLength_Identifier(){
*** testConcateNodeLists(){
*** testMethodDeclaration(){
*** testMessageSend(){
*** testMainOnly(){
** Closure
** Methods
** Mutually recursive methods
** Class class
** Class declaration
** Inheritance
